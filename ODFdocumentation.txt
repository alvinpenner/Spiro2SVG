web file: https://github.com/alvinpenner/Spiro2SVG/blob/master/ODFdocumentation.txt

This is documentation for the source code for the paper "Fitting a Cubic Bezier to a Parametric Function", to be published in College Mathematics Journal.

The source code for the center of mass calculations and the ODF calculations is contained in the files: fitymoment.java, t2_vs_t1.java, and FittedFxn.java. These are standalone java files which can be compiled and run from DOS without any user-interface. (Originally created in NetBeans 6.9.1).

The file FittedFxn.java contains the definition of the curve we are attempting to fit, either a cycloid, or epiTrochoid, or circle.

The file fitymoment.java contains a variety of routines for fitting different combinations of the <x> and <y> moments and the area. For example, the routine 'setup_quartic_cofmx_cofmy()' will calculate the arm lengths for the center of mass fit. The routine 'setup_quartic_extremum_y_area()' will calculate extrema of the <y'> moment at a fixed area. These routines will calculate only arm lengths, not the rms error. They call the routine 'solve_quartic' which will solve a quartic equation for arm length. In this routine it is necessary to specify which root is desired. This is done somewhat clumsily using statements such as 'if (false)' to disable undesired roots. However, it is possible to develop more sophisticated strategies such as enabling root4 if its sign is correct and also enabling root2 as a fallback in case root4 fails.

The file t2_vs_t1.java contains the routine 'solve_at_d1_d2(double d1, double d2, boolean print)' which is used to calculate the rms error if the arm lengths are known. This will call the routine 'solve_quintic_for_t2' to find the u(t) profile, which is called t2[i] in the program. Given the u(t) profile, the actual error calculation is done in 'calc_error()'. The routine 'solve_at_d1_d2' can be used by any fitting method regardless of whether the fit is optimal or not.

The ODF method is implemented in the routine 'iterate_at_d1_d2(double d1, double d2)' which requires an initial estimate of the arm lengths. This will setup a quartic equation to define new values of arm lengths and will then call 'solve_at_d1_d2' to re-optimize the u(t) profile, and will loop until convergence is achieved.
