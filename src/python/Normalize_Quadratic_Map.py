
# read quartic or quintic map as real coefficients Cxy
# (possibly from a curve-fit as in 'Chua_nonlinear_response_scatter.py')
# (or as output from an analytical map, as in 'Linearize_Map.py')
# assuming the linear coeff have already been made uniform
# convert real Cxy to complex coefficients (mu, gij quad, gij cubic, gij quart, gij quintic)
# analytically remove quadratic coeff, keeping overflow up to quintic
# see attached sheets: Normal Form of Quartic Map, Sep. 4, 2024
#                    : Final Quintic Map, Oct 30, 2024, p.10

# conversions from complex gij to real Cxy, and back, are consistent with 'expand_z.py'
# after transposing and multiplying by appropriate column and row scales

# (this is a cleaned-up version of 'transform_quartic.py')
# March 30, 2025

import numpy as np
import sys

hdr = "0 , -0.36 , 1.0202 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20997342155426682 , -0.9778106634320061, -0.7821603395469972, 0.9112474908785516, -0.26221349643846364, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9778106634320061 , 0.20997342155426682, 0.7821603395469972, -0.9112474908785516, 0.26221349643846364, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "1 , -0.36 , 1.021 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20986718436432175 , -0.9782476240886823, -0.7822294893567147, 0.9117706381925785, -0.26249512062807134, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9782476240886823 , 0.20986718436432175, 0.7822294893567148, -0.9117706381925786, 0.2624951206280714, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "2 , -0.36 , 1.022 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20973455993273862 , -0.9787934891366136, -0.7823160581515607, 0.9124239818355834, -0.26284693828608335, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9787934891366136 , 0.20973455993273862, 0.7823160581515607, -0.9124239818355834, 0.26284693828608335, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "3 , -0.36 , 1.023 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20960212624244484 , -0.9793389818716814, -0.7824027725549332, 0.9130766711183845, -0.26319852007004396, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9793389818716814 , 0.20960212624244484, 0.7824027725549332, -0.9130766711183845, 0.26319852007004396, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "4 , -0.36 , 1.024 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20946988283227083 , -0.9798841031140071, -0.782489631991973, 0.9137287079086109, -0.2635498663274307, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9798841031140071 , 0.20946988283227083, 0.782489631991973, -0.9137287079086109, 0.2635498663274307, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "5 , -0.36 , 1.0242 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20944345694338212 , -0.9799930828553004, -0.7825070212330206, 0.9138590371313244, -0.2636201073462559, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9799930828553004 , 0.20944345694338212, 0.7825070212330205, -0.9138590371313242, 0.26362010734625585, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "6 , -0.36 , 1.0244 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20941703864364294 , -0.9801020477760995, -0.7825244162479542, 0.9139893403435772, -0.2636903389606679, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9801020477760995 , 0.20941703864364294, 0.7825244162479542, -0.9139893403435772, 0.2636903389606679, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "7 , -0.36 , 1.0246 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2093906279293873 , -0.9802109978829219, -0.7825418170322126, 0.914119617560193, -0.26376056117343816, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9802109978829219 , 0.2093906279293873, 0.7825418170322126, -0.914119617560193, 0.26376056117343816, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "8 , -0.36 , 1.0248 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.209364224796952 , -0.9803199331822798, -0.7825592235812404, 0.9142498687959822, -0.26383077398733634, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9803199331822798 , 0.209364224796952, 0.7825592235812406, -0.9142498687959825, 0.2638307739873364, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "9 , -0.36 , 1.0249 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20935102607277264 , -0.9803743952811933, -0.7825679290161198, 0.9143149846756926, -0.26386587687057456, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9803743952811933 , 0.20935102607277264, 0.7825679290161198, -0.9143149846756926, 0.26386587687057456, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "10 , -0.36 , 1.02492 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20934838655524127 , -0.9803852872570191, -0.7825696702758521, 0.9143280070728164, -0.2638728971653695, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9803852872570191 , 0.20934838655524127, 0.782569670275852, -0.9143280070728161, 0.26387289716536944, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "11 , -0.36 , 1.02494 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20934574711346945 , -0.980396179084874, -0.7825714115931589, 0.9143410292103684, -0.2638799173662201, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.980396179084874 , 0.20934574711346945, 0.7825714115931589, -0.9143410292103684, 0.2638799173662201, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "12 , -0.36 , 1.02496 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20934310774745374 , -0.9804070707647651, -0.7825731529680368, 0.9143540510883645, -0.2638869374731292, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9804070707647651 , 0.20934310774745374, 0.7825731529680368, -0.9143540510883645, 0.2638869374731292, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "13 , -0.36 , 1.02497 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20934178809285334 , -0.980412516549226, -0.7825740236770632, 0.9143605619300329, -0.26389044749135615, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.980412516549226 , 0.20934178809285334, 0.782574023677063, -0.9143605619300327, 0.2638904474913561, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "14 , -0.36 , 1.024977 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20934086434590085 , -0.9804163285763408, -0.782574633181944, 0.9143651194805952, -0.2638929044901421, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9804163285763408 , 0.20934086434590085, 0.7825746331819439, -0.9143651194805951, 0.263892904490142, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "15 , -0.36 , 1.0249777 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.209340771971716 , -0.9804167097780551, -0.7825746941328198, 0.9143655752339029, -0.2638931501893879, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9804167097780551 , 0.209340771971716, 0.7825746941328199, -0.914365575233903, 0.26389315018938797, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "0 , -0.36 , 1.0250 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20933782924267566 , -0.9804288536806809, -0.7825766358904845, 0.914380094065744, -0.263900977405133, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9804288536806809 , 0.20933782924267566, 0.7825766358904848, -0.9143800940657443, 0.2639009774051331, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "0 , -0.36 , 1.024 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20946988283227083 , -0.9798841031140071, -0.782489631991973, 0.9137287079086109, -0.2635498663274307, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9798841031140071 , 0.20946988283227083, 0.782489631991973, -0.9137287079086109, 0.2635498663274307, 0, 0, 0, 0, 0, 0, 0, 0, 0"

#hdr = "1 , -0.36 , 1.0255 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2092718734874324 , -0.980701090215163, -0.7826201918347091, 0.9147055437357733, -0.26407644485984416, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.980701090215163 , 0.2092718734874324, 0.7826201918347091, -0.9147055437357733, 0.26407644485984416, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "2 , -0.36 , 1.0260 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2092059650157399 , -0.9809732343857738, -0.7826637836809303, 0.9150308314411668, -0.2642518536494503, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9809732343857738 , 0.2092059650157399, 0.7826637836809303, -0.9150308314411668, 0.2642518536494503, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "0 , -0.36 , 1.0265 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20914010377061085 , -0.9812452862938028, -0.782707411358369, 0.9153559574120896, -0.26442720381714685, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9812452862938028 , 0.20914010377061085, 0.782707411358369, -0.9153559574120896, 0.26442720381714685, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "1 , -0.36 , 1.0270 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2090742896951572 , -0.981517246040354, -0.7827510747964076, 0.9156809218782074, -0.2646024954060931, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.981517246040354 , 0.2090742896951572, 0.7827510747964078, -0.9156809218782075, 0.26460249540609315, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "0 , -0.36 , 1.0271 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2090611325354287 , -0.9815716269391708, -0.7827598117690846, 0.9157458954110291, -0.26463754669822753, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9815716269391708 , 0.2090611325354287, 0.7827598117690847, -0.9157458954110294, 0.2646375466982276, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "1 , -0.36 , 1.0272 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20904797725976135 , -0.981626004156372, -0.7827685501688048, 0.9158108624946586, -0.2646725956492818, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.981626004156372 , 0.20904797725976135, 0.7827685501688045, -0.9158108624946585, 0.26467259564928175, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "2 , -0.36 , 1.0273 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20903482386770164 , -0.9816803776927643, -0.782777289995004, 0.9158758231309244, -0.26470764225960053, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9816803776927643 , 0.20903482386770164, 0.7827772899950037, -0.9158758231309242, 0.2647076422596005, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "3 , -0.36 , 1.0274 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20902167235879632 , -0.9817347475491529, -0.7827860312471212, 0.9159407773216567, -0.26474268652952837, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9817347475491529 , 0.20902167235879632, 0.7827860312471212, -0.9159407773216567, 0.26474268652952837, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "4 , -0.36 , 1.0275 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20900852273259177 , -0.9817891137263437, -0.7827947739245937, 0.9160057250686839, -0.26477772845941006, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9817891137263437 , 0.20900852273259177, 0.7827947739245937, -0.9160057250686839, 0.26477772845941006, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "5 , -0.36 , 1.0276 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20899537498863494 , -0.9818434762251418, -0.7828035180268602, 0.9160706663738337, -0.2648127680495899, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9818434762251418 , 0.20899537498863494, 0.7828035180268604, -0.9160706663738339, 0.26481276804959, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "6 , -0.36 , 1.0277 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20898222912647288 , -0.9818978350463525, -0.7828122635533586, 0.9161356012389333, -0.264847805300413, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9818978350463525 , 0.20898222912647288, 0.7828122635533584, -0.9161356012389332, 0.26484780530041296, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "7 , -0.36 , 1.0278 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20896908514565266 , -0.9819521901907796, -0.7828210105035284, 0.9162005296658086, -0.26488284021222297, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9819521901907796 , 0.20896908514565266, 0.7828210105035284, -0.9162005296658086, 0.26488284021222297, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "8 , -0.36 , 1.0279 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2089559430457215 , -0.9820065416592286, -0.7828297588768082, 0.9162654516562847, -0.2649178727853645, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9820065416592286 , 0.2089559430457215, 0.7828297588768082, -0.9162654516562847, 0.2649178727853645, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "3 , -0.36 , 1.0280 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2089428028262268 , -0.9820608894525032, -0.7828385086726363, 0.9163303672121873, -0.2649529030201827, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9820608894525032 , 0.2089428028262268, 0.7828385086726363, -0.9163303672121873, 0.2649529030201827, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "4 , -0.36 , 1.0285 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20887712991947444 , -0.9823325733193787, -0.7828822789704082, 0.9166548485368894, -0.26512801913145945, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9823325733193787 , 0.20887712991947444, 0.7828822789704082, -0.9166548485368894, 0.26512801913145945, 0, 0, 0, 0, 0, 0, 0, 0, 0";
#hdr = "5 , -0.36 , 1.0290 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20881150395584616 , -0.9826041654273308, -0.7829260847479437, 0.9169791692704667, -0.26530307683625093, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9826041654273308 , 0.20881150395584616, 0.7829260847479437, -0.9169791692704667, 0.26530307683625093, 0, 0, 0, 0, 0, 0, 0, 0, 0";

#hdr = "0 , -0.2 , 1.0106 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11084878659191516 , -0.9938589030725798, -0.6695366135252733, 0.9703421522784437, -0.3478390403414429, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9938589030725798 , 0.11084878659191516, 0.6695366135252734, -0.9703421522784439, 0.347839040341443, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "1 , -0.2 , 1.011 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11082385954856047 , -0.9940640919299027, -0.6696078207017638, 0.9705602615533973, -0.3479601016046436, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9940640919299027 , 0.11082385954856047, 0.6696078207017638, -0.9705602615533973, 0.3479601016046436, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "2 , -0.2 , 1.012 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11076159415600578 , -0.9945768678222249, -0.6697858178842976, 0.9711052881878661, -0.3482626295722858, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9945768678222249 , 0.11076159415600578, 0.6697858178842976, -0.9711052881878661, 0.3482626295722858, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "3 , -0.2 , 1.013 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11069940324386887 , -0.9950893637319774, -0.6699637853966035, 0.9716499631584851, -0.3485649789088663, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9950893637319774 , 0.11069940324386887, 0.6699637853966035, -0.9716499631584851, 0.3485649789088663, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "4 , -0.2 , 1.014 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11063728667043862 , -0.9956015801280145, -0.6701417232201435, 0.9721942871566189, -0.34886714987926615, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9956015801280145 , 0.11063728667043862, 0.6701417232201435, -0.9721942871566189, 0.34886714987926615, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "5 , -0.2 , 1.015 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11057524429438179 , -0.9961135174778792, -0.6703196313365473, 0.9727382608714279, -0.34916914274778355, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9961135174778792 , 0.11057524429438179, 0.6703196313365474, -0.9727382608714281, 0.3491691427477836, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "6 , -0.2 , 1.016 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11051327597474328 , -0.9966251762478076, -0.6704975097276152, 0.973281884989872, -0.3494709577781283, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9966251762478076 , 0.11051327597474328, 0.6704975097276152, -0.973281884989872, 0.3494709577781283, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "7 , -0.2 , 1.017 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.1104513815709437 , -0.9971365569027327, -0.6706753583753149, 0.9738251601967225, -0.34977259523342763, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9971365569027327 , 0.1104513815709437, 0.6706753583753149, -0.9738251601967225, 0.34977259523342763, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "8 , -0.2 , 1.018 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11038956094277855 , -0.9976476599062921, -0.670853177261784, 0.9743680871745739, -0.350074055376227, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9976476599062921 , 0.11038956094277855, 0.670853177261784, -0.9743680871745739, 0.350074055376227, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "9 , -0.2 , 1.019 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11032781395041652 , -0.9981584857208307, -0.6710309663693232, 0.974910666603848, -0.3503753384684903, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9981584857208307 , 0.11032781395041652, 0.6710309663693231, -0.9749106666038477, 0.3503753384684902, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "10 , -0.2 , 1.020 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.110266140454399 , -0.9986690348074068, -0.6712087256804018, 0.9754528991628084, -0.3506764447716038, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9986690348074068 , 0.110266140454399, 0.6712087256804016, -0.9754528991628082, 0.35067644477160376, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "11 , -0.2 , 1.021 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.1102045403156377 , -0.9991793076257973, -0.6713864551776517, 0.975994785527567, -0.35097737454637606, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9991793076257973 , 0.1102045403156377, 0.6713864551776515, -0.9759947855275668, 0.350977374546376, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "12 , -0.2 , 1.022 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11014301339541449 , -0.9996893046345022, -0.6715641548438696, 0.9765363263720946, -0.35127812805304026, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9996893046345022 , 0.11014301339541449, 0.6715641548438696, -0.9765363263720946, 0.35127812805304026, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "13 , -0.2 , 1.023 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11008155955537921 , -1.000199026290749, -0.6717418246620137, 0.9770775223682284, -0.3515787055512552, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.000199026290749 , 0.11008155955537921, 0.6717418246620138, -0.9770775223682286, 0.35157870555125526, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "14 , -0.2 , 1.024 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11002017865754893 , -1.0007084730504991, -0.6719194646152057, 0.9776183741856843, -0.3518791073001081, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.0007084730504991 , 0.11002017865754893, 0.6719194646152057, -0.9776183741856843, 0.3518791073001081, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "15 , -0.2 , 1.025 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.10995887056430587 , -1.0012176453684511, -0.6720970746867262, 0.9781588824920613, -0.3521793335581145, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.0012176453684511 , 0.10995887056430587, 0.6720970746867262, -0.9781588824920613, 0.3521793335581145, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "16 , -0.2 , 1.026 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.10989763513839773 , -1.0017265436980471, -0.6722746548600171, 0.9786990479528558, -0.35247938458322164, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.0017265436980471 , 0.10989763513839773, 0.6722746548600169, -0.9786990479528556, 0.35247938458322153, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "0 , -0.2 , 1.027 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.10983647224293483 , -1.0022351684914765, -0.672452205118678, 0.9792388712314661, -0.3527792606328086, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.0022351684914765 , 0.10983647224293483, 0.6724522051186779, -0.979238871231466, 0.3527792606328085, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "1 , -0.2 , 1.028 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.10977538174138937 , -1.0027435201996808, -0.6726297254464675, 0.9797783529892052, -0.35307896196368915, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.0027435201996808 , 0.10977538174138937, 0.6726297254464673, -0.979778352989205, 0.35307896196368904, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "2 , -0.2 , 1.029 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.10971436349759459 , -1.0032515992723594, -0.6728072158273007, 0.9803174938853063, -0.35337848883211165, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.0032515992723594 , 0.10971436349759459, 0.6728072158273007, -0.9803174938853063, 0.35337848883211165, 0, 0, 0, 0, 0, 0, 0, 0, 0"
#hdr = "3 , -0.2 , 1.03 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.10965341737574338 , -1.0037594061579738, -0.672984676245249, 0.9808562945769345, -0.3536778414937629, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.0037594061579738 , 0.10965341737574338, 0.6729846762452492, -0.9808562945769347, 0.35367784149376297, 0, 0, 0, 0, 0, 0, 0, 0, 0"

hdr = "0 , 2.08 , NaN, NaN, NaN, NaN, NaN, NaN , 0 , 0.49999999999999994 , -0.9110433579144299, -1.6107741519463896, -1.1415483038927792, 0.4692258480536104, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9110433579144299 , 0.49999999999999994, 1.6107741519463896, 1.1415483038927792, -0.4692258480536104, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "1 , 2.14 , NaN, NaN, NaN, NaN, NaN, NaN , 0 , 0.5 , -0.9433981132056606, -1.6370988658034027, -1.1341977316068048, 0.5029011341965977, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9433981132056606 , 0.5, 1.6370988658034022, 1.1341977316068046, -0.5029011341965975, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "2 , 2.20 , NaN, NaN, NaN, NaN, NaN, NaN , 0 , 0.4999999999999999 , -0.9746794344808964, -1.6642880936468352, -1.1285761872936697, 0.5357119063531653, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9746794344808964 , 0.4999999999999999, 1.6642880936468347, 1.1285761872936695, -0.5357119063531651, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "3 , 2.26 , NaN, NaN, NaN, NaN, NaN, NaN , 0 , 0.5000000000000001 , -1.004987562112089, -1.692196012468644, -1.1243920249372878, 0.5678039875313559, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 1.004987562112089 , 0.5000000000000001, 1.692196012468644, 1.1243920249372878, -0.5678039875313559, 0, 0, 0, 0, 0, 0, 0, 0, 0";

hdr = "0 , -0.36 , 1.0202 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20997342155426682 , -0.9778106634320061, -0.7821603395469972, 0.9112474908785516, -0.26221349643846364, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9778106634320061 , 0.20997342155426682, 0.7821603395469972, -0.9112474908785516, 0.26221349643846364, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "1 , -0.36 , 1.021 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20986718436432175 , -0.9782476240886823, -0.7822294893567147, 0.9117706381925785, -0.26249512062807134, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9782476240886823 , 0.20986718436432175, 0.7822294893567148, -0.9117706381925786, 0.2624951206280714, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "2 , -0.36 , 1.022 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20973455993273862 , -0.9787934891366136, -0.7823160581515607, 0.9124239818355834, -0.26284693828608335, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9787934891366136 , 0.20973455993273862, 0.7823160581515607, -0.9124239818355834, 0.26284693828608335, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "3 , -0.36 , 1.023 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20960212624244484 , -0.9793389818716814, -0.7824027725549332, 0.9130766711183845, -0.26319852007004396, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9793389818716814 , 0.20960212624244484, 0.7824027725549332, -0.9130766711183845, 0.26319852007004396, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "4 , -0.36 , 1.024 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20946988283227083 , -0.9798841031140071, -0.782489631991973, 0.9137287079086109, -0.2635498663274307, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9798841031140071 , 0.20946988283227083, 0.782489631991973, -0.9137287079086109, 0.2635498663274307, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "5 , -0.36 , 1.025 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20933782924267566 , -0.9804288536806809, -0.7825766358904845, 0.914380094065744, -0.263900977405133, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9804288536806809 , 0.20933782924267566, 0.7825766358904848, -0.9143800940657443, 0.2639009774051331, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "6 , -0.36 , 1.026 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2092059650157399 , -0.9809732343857738, -0.7826637836809303, 0.9150308314411668, -0.2642518536494503, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9809732343857738 , 0.2092059650157399, 0.7826637836809303, -0.9150308314411668, 0.2642518536494503, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "7 , -0.36 , 1.027 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2090742896951572 , -0.981517246040354, -0.7827510747964076, 0.9156809218782074, -0.2646024954060931, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.981517246040354 , 0.2090742896951572, 0.7827510747964078, -0.9156809218782075, 0.26460249540609315, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "8 , -0.36 , 1.028 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.2089428028262268 , -0.9820608894525032, -0.7828385086726363, 0.9163303672121873, -0.2649529030201827, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9820608894525032 , 0.2089428028262268, 0.7828385086726363, -0.9163303672121873, 0.2649529030201827, 0, 0, 0, 0, 0, 0, 0, 0, 0"
hdr = "9 , -0.36 , 1.029 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.20881150395584616 , -0.9826041654273308, -0.7829260847479437, 0.9169791692704667, -0.26530307683625093, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9826041654273308 , 0.20881150395584616, 0.7829260847479437, -0.9169791692704667, 0.26530307683625093, 0, 0, 0, 0, 0, 0, 0, 0, 0"

hdr = "0 , -0.2 , 1.0106 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11084878659191516 , -0.9938589030725798, -0.6695366135252733, 0.9703421522784437, -0.3478390403414429, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9938589030725798 , 0.11084878659191516, 0.6695366135252734, -0.9703421522784439, 0.347839040341443, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "1 , -0.2 , 1.011 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11082385954856047 , -0.9940640919299027, -0.6696078207017638, 0.9705602615533973, -0.3479601016046436, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9940640919299027 , 0.11082385954856047, 0.6696078207017638, -0.9705602615533973, 0.3479601016046436, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "2 , -0.2 , 1.012 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11076159415600578 , -0.9945768678222249, -0.6697858178842976, 0.9711052881878661, -0.3482626295722858, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9945768678222249 , 0.11076159415600578, 0.6697858178842976, -0.9711052881878661, 0.3482626295722858, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "3 , -0.2 , 1.013 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11069940324386887 , -0.9950893637319774, -0.6699637853966035, 0.9716499631584851, -0.3485649789088663, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9950893637319774 , 0.11069940324386887, 0.6699637853966035, -0.9716499631584851, 0.3485649789088663, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "4 , -0.2 , 1.014 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11063728667043862 , -0.9956015801280145, -0.6701417232201435, 0.9721942871566189, -0.34886714987926615, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9956015801280145 , 0.11063728667043862, 0.6701417232201435, -0.9721942871566189, 0.34886714987926615, 0, 0, 0, 0, 0, 0, 0, 0, 0";
hdr = "5 , -0.2 , 1.015 , -0.1 , NaN, NaN, NaN, NaN , 0 , 0.11057524429438179 , -0.9961135174778792, -0.6703196313365473, 0.9727382608714279, -0.34916914274778355, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.9961135174778792 , 0.11057524429438179, 0.6703196313365474, -0.9727382608714281, 0.3491691427477836, 0, 0, 0, 0, 0, 0, 0, 0, 0";

hdr = "3 , 2.24 , NaN, NaN, NaN, NaN, NaN, NaN , 0 , 0.5 , -0.99498743710662, -1.6828211765451586, -1.1256423530903172, 0.5571788234548416, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0.99498743710662 , 0.5, 1.6828211765451586, 1.1256423530903172, -0.5571788234548416, 0, 0, 0, 0, 0, 0, 0, 0, 0"

if len(hdr.split(',')) == 38:       # generic quartic model (8 + 15 + 15)
    hdr_incr = 15
    print ("success ! quartic header")
elif len(hdr.split(',')) == 50:     # generic quintic model (8 + 21 + 21)
    hdr_incr = 21
    print ("success ! quintic header")
else:
    print ("Bad header length, neither quartic nor quintic !")
    sys.exit()

def prod_z_z (N1, p4, p3, p2, p1, p0, N2, q4, q3, q2, q1, q0):
    # multiply two (uniform) z polynomials to produce a new z polynomial (quintic)
    # first  : Sum_N1 (gik * z^i * zbar^k), degree N1
    # second : Sum_N2 (gik * z^i * zbar^k), degree N2

    ret = np.zeros((6,6), complex)    # final accumulated coeff of w^i*wbar^k
                                      # generated by z^i*zbar^k
    P = np.array([p4, p3, p2, p1, p0])
    Q = np.array([q4, q3, q2, q1, q0])
    for i in range (N1 + 1):
        for j in range (N2 + 1):
            #print (i, ',', j, ',', N1 + N2 - i - j, ',', i + j, ',', P[i], ',', Q[j])
            ret[N1 + N2 - i - j][i + j] += P[i]*Q[j]
    return ret

def prod_z_zbar (N1, p4, p3, p2, p1, p0, N2, q4, q3, q2, q1, q0):
    # multiply two (uniform) z polynomials to produce a new z polynomial (quintic)
    # first  : Sum_N1 (gik     * z^i * zbar^k) , degree N1
    # second : Sum_N2 (gik_bar * z^k * zbar^i) , degree N2

    ret = np.zeros((6,6), complex)    # final accumulated coeff of w^i*wbar^k
                                      # generated by z^i*zbar^k
    P = np.array([p4, p3, p2, p1, p0])
    Q = np.array([q4.conjugate(), q3.conjugate(), q2.conjugate(), q1.conjugate(), q0.conjugate()])
    for i in range (N1 + 1):
        for j in range (N2 + 1):
            #print (i, ',', j, ',', N1 + N2 - i - j, ',', i + j, ',', P[i], ',', Q[j])
            ret[N1 - i + j][N2 - j + i] += P[i]*Q[j]
    return ret

def prod_zbar_zbar (N1, p4, p3, p2, p1, p0, N2, q4, q3, q2, q1, q0):
    # multiply two (uniform) z polynomials to produce a new z polynomial (quintic)
    # first  : Sum_N1 (gik_bar * z^k * zbar^i) , degree N1
    # second : Sum_N2 (gik_bar * z^k * zbar^i) , degree N2

    ret = np.zeros((6,6), complex)    # final accumulated coeff of w^i*wbar^k
                                      # generated by z^i*zbar^k
    P = np.array([p4.conjugate(), p3.conjugate(), p2.conjugate(), p1.conjugate(), p0.conjugate()])
    Q = np.array([q4.conjugate(), q3.conjugate(), q2.conjugate(), q1.conjugate(), q0.conjugate()])
    for i in range (N1 + 1):
        for j in range (N2 + 1):
            #print (i, ',', j, ',', N1 + N2 - i - j, ',', i + j, ',', P[i], ',', Q[j])
            ret[i + j][N1 + N2 - i - j] += P[i]*Q[j]
    return ret

def concat (Ni, Nj):
    # expand function z^Ni*zbar^Nj in terms of w^l*wbar^m
    # calculate Xnew = Xold*Xin^Ni*Xin_bar*Nj
    Xold = np.zeros((6,6), complex)    # old accumulated coeff of w^l*wbar^m
    Xold[0][0] = 1
    Xnew = np.zeros((6,6), complex)    # new accumulated coeff of w^l*wbar^m
    #print ('\n', Ni, Nj, 'X0\n', X0.transpose().conjugate())
    for ni in range (Ni + Nj):
        if ni < Ni:
            Xin = X0                            # expand fxn z
        else:
            Xin = X0.transpose().conjugate()    # expand fxn zbar
        #print (ni, '\n', Xin)
        Xnew = np.zeros((6,6), complex)         # new accumulated coeff of w^l*wbar^m
        for oldi in range (6):
            for oldj in range (6 - oldi):
                for ini in range (6 - oldi - oldj):
                    for inj in range (6 - oldi - oldj - ini):
                        Xnew[oldi + ini][oldj + inj] += Xold[oldi][oldj]*Xin[ini][inj]
        #print (ni, '\n', Xnew)
        Xold = Xnew            
    return Xnew

def print_arr (arr):
    # print coeff of uniform polynomials
    print ('---------------')
    for i in range (len(arr)):
        for j in range (i + 1):
            print (arr[i - j][j], ',', end='')
        print ()
    print ('---------------')
    return

# parse a header given in the format of 'Chua_Simul_3.java'

g10 = complex(float(hdr.split(',')[9]), float(hdr.split(',')[9 + hdr_incr]))
print ("\ng10                , ", g10)

# for conversion matrices, use transpose of 'Minv' from 'expand_z.py'
# note gij coeff use factorial notation, Cxy do not

Cxy = np.array([complex(float(hdr.split(',')[11]), float(hdr.split(',')[11 + hdr_incr])), complex(float(hdr.split(',')[12]), float(hdr.split(',')[12 + hdr_incr])), \
                complex(float(hdr.split(',')[13]), float(hdr.split(',')[13 + hdr_incr]))])
print ("Cxy quadratic,", Cxy)
g20 = 2*np.matmul(Cxy, np.array([complex(1, 0), complex(0, -1), complex(-1, 0)]))/4 
g11 = 1*np.matmul(Cxy, np.array([complex(2, 0), complex(0,  0), complex( 2, 0)]))/4
g02 = 2*np.matmul(Cxy, np.array([complex(1, 0), complex(0,  1), complex(-1, 0)]))/4
print ("\ng20 g11 g02        , ", g20, ",", g11, ",", g02)

h20 = g20/(g10*g10 - g10)
h11 = g11/(g10*g10.conjugate() - g10)
h02 = g02/(g10.conjugate()*g10.conjugate() - g10)
print ("\nh20 h11 h02        , ", h20, ",", h11, ",", h02)

Cxy = np.array([complex(float(hdr.split(',')[14]), float(hdr.split(',')[14 + hdr_incr])), complex(float(hdr.split(',')[15]), float(hdr.split(',')[15 + hdr_incr])), \
                complex(float(hdr.split(',')[16]), float(hdr.split(',')[16 + hdr_incr])), complex(float(hdr.split(',')[17]), float(hdr.split(',')[17 + hdr_incr]))])
#print ("Cxy cubic,", Cxy) # see Chua_2D_cubic_variable_c1.py and IV p.9 and V p.2
g30 = 6*np.matmul(Cxy, np.array([complex(1, 0), complex(0, -1), complex(-1, 0), complex(0,  1)]))/8
g21 = 2*np.matmul(Cxy, np.array([complex(3, 0), complex(0, -1), complex( 1, 0), complex(0, -3)]))/8
g12 = 2*np.matmul(Cxy, np.array([complex(3, 0), complex(0,  1), complex( 1, 0), complex(0,  3)]))/8
g03 = 6*np.matmul(Cxy, np.array([complex(1, 0), complex(0,  1), complex(-1, 0), complex(0, -1)]))/8
print ("\ng30 g21 g12 g03    , ", g30, ",", g21, ",", g12, ",", g03)

Cxy = np.array([complex(float(hdr.split(',')[18]), float(hdr.split(',')[18 + hdr_incr])), complex(float(hdr.split(',')[19]), float(hdr.split(',')[19 + hdr_incr])), \
                complex(float(hdr.split(',')[20]), float(hdr.split(',')[20 + hdr_incr])), complex(float(hdr.split(',')[21]), float(hdr.split(',')[21 + hdr_incr])), \
                complex(float(hdr.split(',')[22]), float(hdr.split(',')[22 + hdr_incr]))])
#print ("Cxy quartic,", Cxy) # see Book 'Averaging' p. 57
g40 = 24*np.matmul(Cxy, np.array([complex(1, 0), complex(0,-1), complex(-1, 0), complex(0, 1), complex( 1, 0)]))/16
g31 =  6*np.matmul(Cxy, np.array([complex(4, 0), complex(0,-2), complex( 0, 0), complex(0,-2), complex(-4, 0)]))/16
g22 =  4*np.matmul(Cxy, np.array([complex(6, 0), complex(0, 0), complex( 2, 0), complex(0, 0), complex( 6, 0)]))/16
g13 =  6*np.matmul(Cxy, np.array([complex(4, 0), complex(0, 2), complex( 0, 0), complex(0, 2), complex(-4, 0)]))/16
g04 = 24*np.matmul(Cxy, np.array([complex(1, 0), complex(0, 1), complex(-1, 0), complex(0,-1), complex( 1, 0)]))/16
print ("\ng40 g31 g22 g13 g04, ", g40, ",", g31, ",", g22, ",", g13, ",", g04)

if hdr_incr == 21:                                      # quintic model
    Cxy = np.array([complex(float(hdr.split(',')[23]), float(hdr.split(',')[23 + hdr_incr])), complex(float(hdr.split(',')[24]), float(hdr.split(',')[24 + hdr_incr])), \
                    complex(float(hdr.split(',')[25]), float(hdr.split(',')[25 + hdr_incr])), complex(float(hdr.split(',')[26]), float(hdr.split(',')[26 + hdr_incr])), \
                    complex(float(hdr.split(',')[27]), float(hdr.split(',')[27 + hdr_incr])), complex(float(hdr.split(',')[28]), float(hdr.split(',')[28 + hdr_incr]))])
    print ("Cxy quintic,", Cxy)
    g50 = 120*np.matmul(Cxy, np.array([  1, -1j, -1,  1j,  1,  -1j]))/32
    g41 =  24*np.matmul(Cxy, np.array([  5, -3j, -1, -1j, -3,   5j]))/32
    g32 =  12*np.matmul(Cxy, np.array([ 10, -2j,  2, -2j,  2, -10j]))/32
    g23 =  12*np.matmul(Cxy, np.array([ 10,  2j,  2,  2j,  2,  10j]))/32
    g14 =  24*np.matmul(Cxy, np.array([  5,  3j, -1,  1j, -3,  -5j]))/32
    g05 = 120*np.matmul(Cxy, np.array([  1,  1j, -1, -1j,  1,   1j]))/32
    print ("\ng50 g41 g32 g23 g14 g05, ", g50, ",", g41, ",", g32, ",", g23, ",", g14, ",", g05)

print ("...........................................................")

# see 'Normal Form of Quartic Map', p. 3
# generate inverse of a quadratic z transform : cubic terms (N-S bifurc, Dec 21, 2021, p. 11)

A30 = 0.5*h20*h20 + 0.5*h11*h02.conjugate()             # cubic terms of w(z)
A21 = 1.5*h20*h11 + 0.5*h02*h02.conjugate() + h11*h11.conjugate()
A12 = 0.5*h20*h02 + h11*h11 + 0.5*h11*h20.conjugate() + h02*h11.conjugate()
A03 = 0.5*h11*h02 + 0.5*h02*h20.conjugate()
print ("\nA30 A21 A12 A03    , ", A30, ",", A21, ",", A12, ",", A03)

# generate inverse of a quadratic z transform : quartic terms

A40 = - h20*A30 - h11*A03.conjugate() - h20*h20*h20/8 - h20*h11*h02.conjugate()/4 - h02*h02.conjugate()*h02.conjugate()/8
A31 = - h11*A30 - h20*A21 - h11*A12.conjugate() - h02*A03.conjugate() - h20*h20*h11/2 - h20*h11*h11.conjugate()/2 - h11*h11*h02.conjugate()/2 - h02*h02.conjugate()*h11.conjugate()/2
A22 = - h20*A12 - h02*A12.conjugate() - h11*A21 - h11*A21.conjugate() - h20*h20*h02/4 - h20*h11*h11/2 - h20*h11*h20.conjugate()/4 - h11*h11*h11.conjugate() - h02*h11.conjugate()*h11.conjugate()/2  - h02*h02.conjugate()*h20.conjugate()/4 - h11*h02*h02.conjugate()/4
A13 = - h20*A03 - h11*A30.conjugate() - h11*A12 - h02*A21.conjugate() - h20*h11*h02/2 - h11*h11*h20.conjugate()/2 - h02*h11.conjugate()*h20.conjugate()/2 - h02*h11*h11.conjugate()/2
A04 = - h02*A30.conjugate() - h11*A03 - h20*h02*h02/8 - h02*h20.conjugate()*h20.conjugate()/8 - h11*h02*h20.conjugate()/4
print ("\nA40 A31 A22 A13 A04, ", A40, ",", A31, ",", A22, ",", A13, ",", A04)

# generate inverse of a quadratic z transform : quintic terms

A50 = - h20*A40                       - h11*A04.conjugate()
A41 = - h20*A31 - h02*A04.conjugate() - h11*A13.conjugate() - h11*A40
A32 = - h20*A22 - h02*A13.conjugate() - h11*A22.conjugate() - h11*A31
A23 = - h20*A13 - h02*A22.conjugate() - h11*A31.conjugate() - h11*A22
A14 = - h20*A04 - h02*A31.conjugate() - h11*A40.conjugate() - h11*A13
A05 =           - h02*A40.conjugate()                       - h11*A04

A50 += h20*h20*A30/2
A41 += h20*h20*A21/2 + h20*h11*A30
A32 += h20*h20*A12/2 + h20*h11*A21 + h20*h02*A30/2
A23 += h20*h20*A03/2 + h20*h11*A12 + h20*h02*A21/2
A14 +=                 h20*h11*A03 + h20*h02*A12/2
A05 +=                               h20*h02*A03/2

A50 += h02*h02.conjugate()*A03.conjugate()/2
A41 += h02*h02.conjugate()*A12.conjugate()/2 + h02*h11.conjugate()*A03.conjugate()
A32 += h02*h02.conjugate()*A21.conjugate()/2 + h02*h11.conjugate()*A12.conjugate() + h02*h20.conjugate()*A03.conjugate()/2
A23 += h02*h02.conjugate()*A30.conjugate()/2 + h02*h11.conjugate()*A21.conjugate() + h02*h20.conjugate()*A12.conjugate()/2
A14 +=                                         h02*h11.conjugate()*A30.conjugate() + h02*h20.conjugate()*A21.conjugate()/2
A05 +=                                                                               h02*h20.conjugate()*A30.conjugate()/2

A50 += h11*h02.conjugate()*A30/2
A41 += h11*h02.conjugate()*A21/2 + h11*h11.conjugate()*A30
A32 += h11*h02.conjugate()*A12/2 + h11*h11.conjugate()*A21 + h11*h20.conjugate()*A30/2
A23 += h11*h02.conjugate()*A03/2 + h11*h11.conjugate()*A12 + h11*h20.conjugate()*A21/2
A14 +=                             h11*h11.conjugate()*A03 + h11*h20.conjugate()*A12/2
A05 +=                                                       h11*h20.conjugate()*A03/2

A50 += h11*h20*A03.conjugate()/2
A41 += h11*h20*A12.conjugate()/2 + h11*h11*A03.conjugate()
A32 += h11*h20*A21.conjugate()/2 + h11*h11*A12.conjugate() + h11*h02*A03.conjugate()/2
A23 += h11*h20*A30.conjugate()/2 + h11*h11*A21.conjugate() + h11*h02*A12.conjugate()/2
A14 +=                             h11*h11*A30.conjugate() + h11*h02*A21.conjugate()/2
A05 +=                                                       h11*h02*A30.conjugate()/2
print ("\nA50_41_32_23_14_05 , ", A50, ",", A41, ",", A32, ",", A23, ",", A14, ",", A05)
print ('--------------------------------------------------------------------')

#   generate the product of a quintic z-map and a quadratic transform from z to w
#   to produce a quintic function in w
#   see attachment 'Normal Form of Quartic Map', p. 6-7
#   see attachment 'Final Quintic Map' (Oct 30, 2024), p.10

X0 = np.zeros((6,6), complex)    # final accumulated coeff of w^i*wbar^k
                                 # generated by z-map and z(w)
#print (g10, ',', g10*h20/2, ',', g10*h11, ',', g10*h02/2)
X0 += g10*prod_z_z (0, 1, 0, 0, 0, 0, 1,     1,     0,     0,     0,      0)
X0 += g10*prod_z_z (0, 1, 0, 0, 0, 0, 2, h20/2,   h11, h02/2,     0,      0)

X0 += 0.50*g20*prod_z_z (1,     1,   0,     0, 0, 0, 1,     1,   0,     0,      0,      0)
X0 += 0.50*g20*prod_z_z (1,     2,   0,     0, 0, 0, 2, h20/2, h11, h02/2,      0,      0)
X0 += 0.50*g20*prod_z_z (2, h20/2, h11, h02/2, 0, 0, 2, h20/2, h11, h02/2,      0,      0)

X0 +=      g11*prod_z_zbar (1,     1,   0,     0, 0, 0, 1,     1,   0,     0,   0,      0)
X0 +=      g11*prod_z_zbar (1,     1,   0,     0, 0, 0, 2, h20/2, h11, h02/2,   0,      0)
X0 +=      g11*prod_z_zbar (2, h20/2, h11, h02/2, 0, 0, 1,     1,   0,     0,   0,      0)
X0 +=      g11*prod_z_zbar (2, h20/2, h11, h02/2, 0, 0, 2, h20/2, h11, h02/2,   0,      0)

X0 += 0.50*g02*prod_zbar_zbar (1,     1,   0,     0, 0, 0, 1,     1,   0,     0,  0,    0)
X0 += 0.50*g02*prod_zbar_zbar (1,     2,   0,     0, 0, 0, 2, h20/2, h11, h02/2,  0,    0)
X0 += 0.50*g02*prod_zbar_zbar (2, h20/2, h11, h02/2, 0, 0, 2, h20/2, h11, h02/2,  0,    0)

X0 += 1.0/6.0*g30*prod_z_z (1,       1,     0,       0, 0, 0, 2,     1,   0,     0,  0,  0)
X0 += 1.0/6.0*g30*prod_z_z (2,       3,     0,       0, 0, 0, 2, h20/2, h11, h02/2,  0,  0)
X0 += 1.0/6.0*g30*prod_z_z (3, 3*h20/2, 3*h11, 3*h02/2, 0, 0, 2, h20/2, h11, h02/2,  0,  0)

X0 += 0.5*g21*prod_z_zbar (2,   1,     0,    0,     0, 0, 1,     1,   0,     0,  0,  0)
X0 += 0.5*g21*prod_z_zbar (3, h20, 2*h11,  h02,     0, 0, 1,     1,   0,     0,  0,  0)
X0 += 0.5*g21*prod_z_z    (3,   0, h20/2,  h11, h02/2, 0, 2, h20/2, h11, h02/2,  0,  0)
X0 += 0.5*g21*prod_z_zbar (2,   1,     0,    0,     0, 0, 2, h20/2, h11, h02/2,  0,  0)
X0 += 0.5*g21*prod_z_zbar (3, h20, 2*h11,  h02,     0, 0, 2, h20/2, h11, h02/2,  0,  0)

X0 += 0.5*g12*prod_z_zbar    (1,     1,     0,     0,     0, 0, 2,     1,     0,     0,  0,  0)
X0 += 0.5*g12*prod_z_zbar    (1,     1,     0,     0,     0, 0, 3,   h20, 2*h11,   h02,  0,  0)
X0 += 0.5*g12*prod_zbar_zbar (3,     0, h20/2,   h11, h02/2, 0, 2, h20/2,   h11, h02/2,  0,  0)
X0 += 0.5*g12*prod_z_zbar    (2, h20/2,   h11, h02/2,     0, 0, 2,     1,     0,     0,  0,  0)
X0 += 0.5*g12*prod_z_zbar    (2, h20/2,   h11, h02/2,     0, 0, 3,   h20, 2*h11,   h02,  0,  0)

X0 += 1.0/6.0*g03*prod_zbar_zbar (1,       1,     0,       0, 0, 0, 2,     1,   0,     0,  0,  0)
X0 += 1.0/6.0*g03*prod_zbar_zbar (2,       3,     0,       0, 0, 0, 2, h20/2, h11, h02/2,  0,  0)
X0 += 1.0/6.0*g03*prod_zbar_zbar (3, 3*h20/2, 3*h11, 3*h02/2, 0, 0, 2, h20/2, h11, h02/2,  0,  0)

X0 += 1.0/24.0*g40*prod_z_z   (2,   1,     0,   0, 0, 0, 2,     1,   0,     0,  0,  0)
X0 += 1.0/24.0*g40*prod_z_z   (3,   4,     0,   0, 0, 0, 2, h20/2, h11, h02/2,  0,  0)

X0 += 1.0/6.0*g31*prod_z_zbar (3,     1,     0,     0, 0, 0, 1,     1,   0,     0,  0,  0)
X0 += 1.0/6.0*g31*prod_z_zbar (3,     1,     0,     0, 0, 0, 2, h20/2, h11, h02/2,  0,  0)
X0 += 1.0/6.0*g31*prod_z_zbar (4, h20/2,   h11, h02/2, 0, 0, 1,     3,   0,     0,  0,  0)

X0 += 1.0/4.0*g22*prod_z_zbar (2,     1,     0,     0, 0, 0, 2,     1,   0,     0,  0,  0)
X0 += 1.0/4.0*g22*prod_z_zbar (2,     2,     0,     0, 0, 0, 3, h20/2, h11, h02/2,  0,  0)
X0 += 1.0/4.0*g22*prod_z_zbar (3, h20/2,   h11, h02/2, 0, 0, 2,     2,   0,     0,  0,  0)

X0 += 1.0/6.0*g13*prod_z_zbar (1,     1,     0,     0, 0, 0, 3,     1,   0,     0,  0,  0)
X0 += 1.0/6.0*g13*prod_z_zbar (2, h20/2,   h11, h02/2, 0, 0, 3,     1,   0,     0,  0,  0)
X0 += 1.0/6.0*g13*prod_z_zbar (1,     3,     0,     0, 0, 0, 4, h20/2, h11, h02/2,  0,  0)

X0 += 1.0/24.0*g04*prod_zbar_zbar (2, 1,     0,     0, 0, 0, 2,     1,   0,     0,  0,  0)
X0 += 1.0/24.0*g04*prod_zbar_zbar (3, 4,     0,     0, 0, 0, 2, h20/2, h11, h02/2,  0,  0)

if hdr_incr == 21:                                      # quintic model
    print ("add X0 quintic")
    X0 += 1.0/120.0*g50*prod_z_z       (3,   1,    0,   0, 0, 0, 2,     1,   0,     0,  0,  0)
    X0 +=  1.0/24.0*g41*prod_z_zbar    (4,   1,    0,   0, 0, 0, 1,     1,   0,     0,  0,  0)
    X0 +=  1.0/12.0*g32*prod_z_zbar    (3,   1,    0,   0, 0, 0, 2,     1,   0,     0,  0,  0)
    X0 +=  1.0/12.0*g23*prod_z_zbar    (2,   1,    0,   0, 0, 0, 3,     1,   0,     0,  0,  0)
    X0 +=  1.0/24.0*g14*prod_z_zbar    (1,   1,    0,   0, 0, 0, 4,     1,   0,     0,  0,  0)
    X0 += 1.0/120.0*g05*prod_zbar_zbar (3,   1,    0,   0, 0, 0, 2,     1,   0,     0,  0,  0)

print ('X0 =\n', X0)
print ('arr X0')
print_arr (X0)

# invert the z(w) transform

W = np.zeros((6,6), complex)    # final w-map, based on X0: coeff of w^l*wbar^m
W = W + concat(1, 0) - h20*concat(2, 0)/2 - h11*concat(1, 1) - h02*concat(0, 2)/2
W = W + A30*concat(3, 0) + A21*concat(2, 1) + A12*concat(1, 2) + A03*concat(0, 3)
W = W + A40*concat(4, 0) + A31*concat(3, 1) + A22*concat(2, 2) + A13*concat(1, 3) + A04*concat(0, 4)
W = W + A50*concat(5, 0) + A41*concat(4, 1) + A32*concat(3, 2) + A23*concat(2, 3) + A14*concat(1, 4) + A05*concat(0, 5)

print ('W =\n', W)
print ('arr W')
print_arr (W)

# extract complex gij (non-factorial) notation of 'uniform_quartic.py'

Q3 = (W[3][0], W[2][1], W[1][2], W[0][3])
Q4 = (W[4][0], W[3][1], W[2][2], W[1][3], W[0][4])
Q5 = (W[5][0], W[4][1], W[3][2], W[2][3], W[1][4], W[0][5])
#Q3 = (0, W[2][1], 0, 0)     # produce g21 only
#Q4 = (0, 0, 0, 0, 0)
#Q5 = (0, 0, 0, 0, 0, 0)
print ("\nQ3, ", Q3)
print ("\nQ4, ", Q4)
print ("\nQ5, ", Q5)

# convert from gij (non-factorial) to complex (transformed) Dxy (non-factorial)
# for conversion matrices, use transpose of 'M' from 'expand_z.py'

D30 = np.matmul(Q3, np.array([  1,   1,   1,   1])) 
D21 = np.matmul(Q3, np.array([ 3j,  1j, -1j, -3j]))
D12 = np.matmul(Q3, np.array([ -3,   1,   1,  -3]))
D03 = np.matmul(Q3, np.array([-1j,  1j, -1j,  1j]))
print ("\nD30 D21 D12 D03    , ", D30, ",", D21, ",", D12, ",", D03)

D40 = np.matmul(Q4, np.array([  1,   1,   1,   1,   1])) 
D31 = np.matmul(Q4, np.array([ 4j,  2j,  0j, -2j, -4j]))
D22 = np.matmul(Q4, np.array([ -6,   0,   2,   0,  -6]))
D13 = np.matmul(Q4, np.array([-4j,  2j,  0j, -2j,  4j]))
D04 = np.matmul(Q4, np.array([  1,  -1,   1,  -1,   1]))
print ("\nD40 D31 D22 D13 D04, ", D40, ",", D31, ",", D22, ",", D13, ",", D04)

D50 = np.matmul(Q5, np.array([   1,   1,   1,   1,   1,   1])) 
D41 = np.matmul(Q5, np.array([  5j,  3j,  1j, -1j, -3j, -5j]))
D32 = np.matmul(Q5, np.array([ -10,  -2,   2,   2,  -2, -10]))
D23 = np.matmul(Q5, np.array([-10j,  2j,  2j, -2j, -2j, 10j]))
D14 = np.matmul(Q5, np.array([   5,  -3,   1,   1,  -3,   5]))
D05 = np.matmul(Q5, np.array([  1j, -1j,  1j, -1j,  1j, -1j]))
print ("\nD50 D41 D32 D23 D14 D05, ", D50, ",", D41, ",", D32, ",", D23, ",", D14, ",", D05)
print ()

#   print transformed Dxy hdr

print ('    private static String hdr = "', end='')
temp = hdr.split(',')
for i in range(8):
    print (temp[i], ",", end='')
print (" 0,", g10.real, ",",-g10.imag, ", 0, 0, 0,", D30.real, ",", D21.real, ",", D12.real, ",", D03.real, ",", D40.real, ",", D31.real, ",", D22.real, ",", D13.real, ",", D04.real, ",", end='')
print (D50.real, ",", D41.real, ",", D32.real, ",", D23.real, ",", D14.real, ",", D05.real, ",", end='')
print (" 0,", g10.imag, ",", g10.real, ", 0, 0, 0,", D30.imag, ",", D21.imag, ",", D12.imag, ",", D03.imag, ",", D40.imag, ",", D31.imag, ",", D22.imag, ",", D13.imag, ",", D04.imag, ",", end='')
print (D50.imag, ",", D41.imag, ",", D32.imag, ",", D23.imag, ",", D14.imag, ",", D05.imag, end='')
print ('";')
